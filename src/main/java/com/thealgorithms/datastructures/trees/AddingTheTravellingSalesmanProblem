package com.thealgorithms.datastructures.trees;

import java.util.ArrayList;
import java.util.List;
import java.util.PriorityQueue;

public class AddingtheTravellingSalesmanProblem {

    // Class to represent a node in the priority queue
    static class Node implements Comparable<Node> {
        int currentCity;
        int cost;
        List<Integer> path;

        // Constructor
        public Node(int currentCity, int cost, List<Integer> path) {
            this.currentCity = currentCity;
            this.cost = cost;
            this.path = new ArrayList<>(path);
        }

        // Compare nodes based on the cost (used by the priority queue)
        @Override
        public int compareTo(Node other) {
            return Integer.compare(this.cost, other.cost);
        }
    }

    // Function to solve TSP using Best-First Search (Greedy Heuristic)
    public static void tspBestFirstSearch(int[][] dist) {
        int n = dist.length;
        int start = 0;  // Starting from city 0

        // Priority queue to store the current path and cost
        PriorityQueue<Node> pq = new PriorityQueue<>();
        List<Integer> initialPath = new ArrayList<>();
        initialPath.add(start);
        pq.add(new Node(start, 0, initialPath));

        int bestCost = Integer.MAX_VALUE;
        List<Integer> bestPath = null;

        // Best-first search algorithm
        while (!pq.isEmpty()) {
            Node currentNode = pq.poll();
            int currentCity = currentNode.currentCity;
            int currentCost = currentNode.cost;
            List<Integer> currentPath = currentNode.path;

            // If all cities are visited, check the complete tour by returning to the start
            if (currentPath.size() == n) {
                int totalCost = currentCost + dist[currentCity][start];  // Return to the start city
                if (totalCost < bestCost) {
                    bestCost = totalCost;
                    bestPath = new ArrayList<>(currentPath);
                    bestPath.add(start);  // Complete the tour
                }
                continue;
            }

            // Expand to all unvisited cities
            for (int nextCity = 0; nextCity < n; nextCity++) {
                if (!currentPath.contains(nextCity)) {  // Only consider unvisited cities
                    List<Integer> newPath = new ArrayList<>(currentPath);
                    newPath.add(nextCity);
                    int newCost = currentCost + dist[currentCity][nextCity];
                    pq.add(new Node(nextCity, newCost, newPath));
                }
            }
        }

        // Print the result
        System.out.println("The minimum cost of the tour (BFS Approximation) is: " + bestCost);
        System.out.println("The best path found is: " + bestPath);
    }

    // Function to provide a default distance matrix
    public static int[][] getDefaultDistanceMatrix() {
        int[][] dist = {
            {0, 10, 20, 30},
            {10, 0, 15, 25},
            {20, 15, 0, 35},
            {30, 25, 35, 0}
        };

        System.out.println("Using default distance matrix:");
        for (int i = 0; i < dist.length; i++) {
            System.out.print("Distance from city " + i + ": ");
            for (int j = 0; j < dist[i].length; j++) {
                System.out.print(dist[i][j] + " ");
            }
            System.out.println();
        }

        return dist;
    }

    public static void main(String[] args) {
        // Use the default distance matrix
        int[][] dist = getDefaultDistanceMatrix();

        // Find the minimum cost of the tour
        tspBestFirstSearch(dist);
    }
}

